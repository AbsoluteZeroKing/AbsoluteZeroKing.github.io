(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{498:function(t,s,a){"use strict";a.r(s);var n=a(19),p=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"a算法与d算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a算法与d算法"}},[t._v("#")]),t._v(" A"),a("em",[t._v("算法与D")]),t._v("算法")]),t._v(" "),a("h2",{attrs:{id:"a-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-算法"}},[t._v("#")]),t._v(" A*算法")]),t._v(" "),a("p",[t._v("A*算法相较深度优先广度优先，最大的改进在于其有方向性的试探以及展望和回顾的结合")]),t._v(" "),a("p",[t._v("深度搜索（下图）：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.leesdog.space/100.gif",alt:"https://image.leesdog.space/100.gif"}})]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("depthFirstSearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*** YOUR CODE HERE ***"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#可以看出这个函数是用来得到当前位置的")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Start:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getStartState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这个函数是用来判断当前位置是否是终点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Is the start a goal?"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isGoalState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getStartState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这个函数是用来得到后继节点的 例如((5, 4), 'South', 1)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Start\'s successors:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getSuccessors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getStartState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getStartState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个栈用于存放深度序列，同时创建一个访问过的节点序列")]),t._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    visited "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将开始的节点状态放入结果栈内")]),t._v("\n    result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#如果到达终点，则返回path")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isGoalState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" path\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#如果未被访问，则访问并计算路径并压入所有后继节点进栈")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" child_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child_cost "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getSuccessors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                new_cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" child_cost\n                new_path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("宽度搜索（下图）：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.leesdog.space/2%2000_00_00-00_00_30.gif",alt:""}})]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("breadthFirstSearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Search the shallowest nodes in the search tree first."""')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*** YOUR CODE HERE ***"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在之前的数据结构中我们其实就学了，深度和宽度代码上区别就是使用队列和栈的区别巧妙实现")]),t._v("\n    start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getStartState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    visited "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isGoalState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" path\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" child_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child_cost "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getSuccessors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                new_cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" child_cost\n                new_path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("A*搜索（下图）：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.leesdog.space/3%2000_00_00-00_00_30.gif",alt:""}})]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("aStarSearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" heuristic"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nullHeuristic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Search the node that has the lowest combined cost and heuristic first."""')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*** YOUR CODE HERE ***"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#A*算法的核心在于展望+回顾，我个人感觉事实上A*就是典型的类动态规划问题，有一点贪心的感觉")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#其核心在于f(n)=g(n)+h(n)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#g(n)代表距离起点的代价，这个代价是局部确认的")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#h(n)代表距离终点的代价，这个代价是预估的")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#如果要对A*算法本身做优化，可能需要在这个预估上做优化")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#核心思想在于找到f(n)最优的路径")]),t._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PriorityQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getStartState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    visited "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#print(state)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isGoalState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#print(path)")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" path \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" child_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child_cost "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getSuccessors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                new_cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" child_cost\n                new_path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" heuristic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" problem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("raiseNotDefined"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("可以看到基本的A*算法相较深度和广度优先来说能"),a("strong",[t._v("找到路径的最优解")]),t._v("去做行动，而深度优先和广度优先算法虽然能走到最终的位置，但是"),a("strong",[t._v("并没有找到最优解")])]),t._v(" "),a("p",[t._v("主要的一个因素在于A*算法在运算过程中，每次从优先队列中选取f(n)值最小（优先级最高）的节点作为下一个待遍历的节点。$ f(n)=g(n)+h(n)$，")]),t._v(" "),a("ul",[a("li",[t._v("f(n)是节点n的综合优先级。当我们选择下一个要遍历的节点时，我们总会选取综合优先级最高（值最小）的节点。")]),t._v(" "),a("li",[t._v("g(n) 是节点n距离起点的代价。")]),t._v(" "),a("li",[t._v("h(n)是节点n距离终点的预计代价，这也就是A*算法的"),a("strong",[t._v("启发函数")]),t._v("。")])]),t._v(" "),a("p",[t._v("其实我们需要注意的是启发函数：")]),t._v(" "),a("ul",[a("li",[t._v("在极端情况下，当启发函数"),a("strong",[t._v("h(n)始终为0")]),t._v("，则将由g(n)决定节点的优先级，此时算法就退化成了"),a("strong",[t._v("Dijkstra算法")]),t._v("。")]),t._v(" "),a("li",[t._v("如果h(n)始终"),a("strong",[t._v("小于等于节点n到终点的代价")]),t._v("，则A*算法"),a("strong",[t._v("保证一定能够找到最短路径")]),t._v("。但是当h(n)的值越小，算法将遍历越多的节点，也就导致算法越慢。")]),t._v(" "),a("li",[t._v("如果h(n)完全等于节点n到终点的代价，则A*算法将找到最佳路径，并且速度很快。但并非所有场景下都能做到这一点。因为在没有达到终点之前，我们很难确切算出距离终点还有多远，多数情况下只是进行估计。")]),t._v(" "),a("li",[t._v("如果h(n)的值比节点n到终点的代价要大，则A*算法不能保证找到最短路径，不过此时会很快。")]),t._v(" "),a("li",[t._v("在另外一个极端情况下，如果h(n)相较于g(n)大很多，则此时只有h(n)产生效果，这也就变成了"),a("strong",[t._v("最佳优先搜索")]),t._v("。")])]),t._v(" "),a("p",[t._v("一般来说，如果只允许图形向上下左右四个方向运动，这种情况用"),a("strong",[t._v("曼哈顿距离")]),t._v("作为启发函数居多")]),t._v(" "),a("p",[t._v("其实自己看一下上面图的效果，里面的背景颜色代表其试探的路径次数，颜色越深代表试探次数越多，在A*算法中虽然我们通过默认的曼哈顿距离作为启发函数能做到最短距离的获取，但其试探次数相较深度优先其实是多了不少的，这里可能是A*算法可能的一种优化")]),t._v(" "),a("p",[t._v("仔细观察图可以发现，这几张地图多在一些死角墙多的地方会重复的进行试探遍历，在这张地图以及某些地图上这个问题就比较突出，我和其他几个朋友讨论过，他们选择了在计算cost时在最开始计算初始位置到目标位置直线墙的数量，然后采取一种增加权值的策略达到趋向走墙少的这样一种试探方式，我最开始觉得比较有道理，但是后面仔细一想并非如此，因为这种策略通过直接的控制权值影响了f（n）中g和h所占比重，如果地图的结果并不是墙多的时候距离长，则会导致结果出现问题或冗余的试探计算，也就是说这种策略和地图长什么样有很大关系，并不是一种广义上的改进策略")]),t._v(" "),a("h2",{attrs:{id:"d-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-算法"}},[t._v("#")]),t._v(" D*算法")]),t._v(" "),a("p",[t._v("在我搜索是不是有方法基于A*同时更优秀的时候，我发现了D*算法，最初的D*算法其实只是一种知情的增量搜索算法，后面基于A*，基于动态SWSF-FP又进化成一种增量启发式搜索算法D* Lite，貌似效果很好，但由于我有些地方看的还是不太懂所以没有成功把他复现出来，之后可以抽时间继续研究一下")]),t._v(" "),a("p",[t._v("我在youtube上搜索到了关于D*和A*对比的演示视频")]),t._v(" "),a("h4",{attrs:{id:"a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a"}},[t._v("#")]),t._v(" A*:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.leesdog.space/A%2000_00_00-00_00_30.gif",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d"}},[t._v("#")]),t._v(" D*")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.leesdog.space/D%2000_00_00-00_00_30.gif",alt:""}})]),t._v(" "),a("p",[t._v("D*的主要几个思想一是在于其是"),a("strong",[t._v("从终点开始搜索")]),t._v("，而不是起点；二是在于维护了一个新的openlist，其中的节点有如下几个状态")]),t._v(" "),a("ul",[a("li",[t._v("NEW：意味着它从未被列入OPEN list")]),t._v(" "),a("li",[t._v("OPEN：意味着它当前在OPEN list中")]),t._v(" "),a("li",[t._v("CLOSED：意味着它不在OPEN list中")]),t._v(" "),a("li",[t._v("RAISE：意味着它的成本比上次OPEN list时要高")]),t._v(" "),a("li",[t._v("LOWER：意味着它的成本比上次OPEN list时要低")])]),t._v(" "),a("p",[t._v("该算法通过迭代地从OPEN list中选择一个节点并对其求值来工作。然后，它将节点的变化传播到所有相邻节点，并将它们放到OPEN list中。这种传播过程称为“扩张”。与从始至终遵循路径的A*不同，D*从目标节点开始向后搜索。每个扩张节点都有一个反向指针，它指向指向目标的下一个节点，每个节点都知道目标的确切成本。当开始节点是下一个要展开的节点时，算法就完成了，只需遵循反向指针就可以找到目标的路径。当在指定的路径上检测到障碍物时，"),a("strong",[t._v("所有受影响的点将再次被放到OPEN列表中")]),t._v("，这次标记为RAISE。然而，在一个RAISED的节点增加成本之前，算法会"),a("strong",[t._v("检查它的邻居，并检查它是否可以降低节点的成本")]),t._v("。如果没有，则提升状态传播到所有节点的后代，即具有反向指针的节点。然后评估这些节点，并且传递RAISE状态，形成波。 当RAISED节点可以减少时，它的反向指针会更新，并将LOWER状态传递给它的邻居。这些RAISE和LOWER的状态波是D*的核心。到这个时候，一系列其他的点就不会被波浪“碰触”了。")])])}),[],!1,null,null,null);s.default=p.exports}}]);